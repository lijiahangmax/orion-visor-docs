var Z=Object.create;var k=Object.defineProperty;var Y=Object.getOwnPropertyDescriptor;var ee=Object.getOwnPropertyNames;var te=Object.getPrototypeOf,ne=Object.prototype.hasOwnProperty;var M=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var ie=(e,t,n,i)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of ee(t))!ne.call(e,o)&&o!==n&&k(e,o,{get:()=>t[o],enumerable:!(i=Y(t,o))||i.enumerable});return e};var oe=(e,t,n)=>(n=e!=null?Z(te(e)):{},ie(t||!e||!e.__esModule?k(n,"default",{value:e,enumerable:!0}):n,e));var q=M(T=>{"use strict";Object.defineProperty(T,"__esModule",{value:!0});T.shellExpand=T.ensureTrailingSlash=void 0;var se=e=>e.endsWith("/")?e:`${e}/`;T.ensureTrailingSlash=se;var re=(e,t)=>e.startsWith("~")&&(e.length===1||e.charAt(1)==="/")?e.replace("~",t):e,ae=(e,t)=>e.replace(/\$([A-Za-z0-9_]+)/g,o=>{var s;let a=o.slice(1);return(s=t[a])!==null&&s!==void 0?s:o}).replace(/\$\{([A-Za-z0-9_]+)(?::-([^}]+))?\}/g,(o,s,a)=>{var l,u;return(u=(l=t[s])!==null&&l!==void 0?l:a)!==null&&u!==void 0?u:o}),ce=(e,t)=>{var n;let{environmentVariables:i}=t;return ae(re(e,(n=i?.HOME)!==null&&n!==void 0?n:"~"),i)};T.shellExpand=ce});var K=M(v=>{"use strict";var le=v&&v.__awaiter||function(e,t,n,i){function o(s){return s instanceof n?s:new n(function(a){a(s)})}return new(n||(n=Promise))(function(s,a){function l(r){try{c(i.next(r))}catch(d){a(d)}}function u(r){try{c(i.throw(r))}catch(d){a(d)}}function c(r){r.done?s(r.value):o(r.value).then(l,u)}c((i=i.apply(e,t||[])).next())})};Object.defineProperty(v,"__esModule",{value:!0});v.filepaths=v.folders=v.getCurrentInsertedDirectory=v.sortFilesAlphabetically=void 0;var L=q();function W(e,t=[]){let n=t.map(o=>o.toLowerCase()),i=e.filter(o=>!n.includes(o.toLowerCase()));return[...i.filter(o=>!o.startsWith(".")).sort((o,s)=>o.localeCompare(s)),...i.filter(o=>o.startsWith(".")).sort((o,s)=>o.localeCompare(s)),"../"]}v.sortFilesAlphabetically=W;var ue=(e,t,n)=>{if(e===null)return"/";let i=(0,L.shellExpand)(t,n),o=i.slice(0,i.lastIndexOf("/")+1);return o===""?(0,L.ensureTrailingSlash)(e):o.startsWith("/")?o:`${(0,L.ensureTrailingSlash)(e)}${o}`};v.getCurrentInsertedDirectory=ue;function j(e={}){let{extensions:t=[],equals:n=[],matches:i,filterFolders:o=!1,editFileSuggestions:s,editFolderSuggestions:a,rootDirectory:l,showFolders:u="always"}=e,c=new Set(t),r=new Set(n),d=()=>t.length>0||n.length>0||i,g=(p=[])=>d()?p.filter(({name:h="",type:b})=>{if(!o&&b==="folder"||r.has(h)||i&&h.match(i))return!0;let[,...f]=h.split(".");if(f.length>=1){let S=f.length-1,w=f[S];do{if(c.has(w))return!0;S-=1,w=[f[S],w].join(".")}while(S>=0)}return!1}):p,O=(p=[])=>!s&&!a?p:p.map(h=>Object.assign(Object.assign({},h),(h.type==="file"?s:a)||{}));return{trigger:(p,h)=>{let b=p.lastIndexOf("/"),f=h.lastIndexOf("/");return b!==f?!0:b===-1&&f===-1?!1:p.slice(0,b)!==h.slice(0,f)},getQueryTerm:p=>p.slice(p.lastIndexOf("/")+1),custom:(p,h,b)=>le(this,void 0,void 0,function*(){var f;let{isDangerous:S,currentWorkingDirectory:w,searchTerm:m}=b,_=(f=(0,v.getCurrentInsertedDirectory)(l??w,m,b))!==null&&f!==void 0?f:"/";try{let P=yield h({command:"ls",args:["-1ApL"],cwd:_}),U=W(P.stdout.split(`
`),[".DS_Store"]),R=[];for(let C of U)if(C){let V=C.endsWith("/")?"folders":"filepaths";(V==="filepaths"&&u!=="only"||V==="folders"&&u!=="never")&&R.push({type:V==="filepaths"?"file":"folder",name:C,insertValue:C,isDangerous:S,context:{templateType:V}})}return O(g(R))}catch{return[]}})}}v.folders=Object.assign(()=>j({showFolders:"only"}),Object.freeze(j({showFolders:"only"})));v.filepaths=Object.assign(j,Object.freeze(j()))});var $=M(x=>{"use strict";var D=x&&x.__awaiter||function(e,t,n,i){function o(s){return s instanceof n?s:new n(function(a){a(s)})}return new(n||(n=Promise))(function(s,a){function l(r){try{c(i.next(r))}catch(d){a(d)}}function u(r){try{c(i.throw(r))}catch(d){a(d)}}function c(r){r.done?s(r.value):o(r.value).then(l,u)}c((i=i.apply(e,t||[])).next())})};Object.defineProperty(x,"__esModule",{value:!0});x.keyValueList=x.keyValue=x.valueList=void 0;var G=new Map;function E(e,t){return e.length===0?t:t.map(n=>n.insertValue?n:Object.assign(Object.assign({},n),{insertValue:n.name+e}))}function H(e,t,n){return D(this,void 0,void 0,function*(){if(typeof e=="function"){let i=yield e(...n);return E(t,i)}if(typeof e[0]=="string"){let i=e.map(o=>({name:o}));return E(t,i)}return E(t,e)})}function B(e,t,n,i){return D(this,void 0,void 0,function*(){if(n||Array.isArray(e)){let o=G.get(e);return o===void 0&&(o=yield H(e,t,i),G.set(e,o)),o}return H(e,t,i)})}function J(e,t){return typeof t=="string"?e&&t==="keys"||!e&&t==="values":t}function F(e,...t){return Math.max(...t.map(n=>e.lastIndexOf(n)))}function N(e,t){let n=new Set(e);return t.filter(i=>{var o;return typeof i.name=="string"?!n.has(i.name):!(!((o=i.name)===null||o===void 0)&&o.some(s=>n.has(s)))})}function de({delimiter:e=",",values:t=[],cache:n=!1,insertDelimiter:i=!1,allowRepeatedValues:o=!1}){return{trigger:(s,a)=>s.lastIndexOf(e)!==a.lastIndexOf(e),getQueryTerm:s=>s.slice(s.lastIndexOf(e)+e.length),custom:(...s)=>D(this,void 0,void 0,function*(){var a;let l=yield B(t,i?e:"",n,s);if(o)return l;let[u]=s,c=(a=u[u.length-1])===null||a===void 0?void 0:a.split(e);return N(c,l)})}}x.valueList=de;function fe({separator:e="=",keys:t=[],values:n=[],cache:i=!1,insertSeparator:o=!0}){return{trigger:(s,a)=>s.indexOf(e)!==a.indexOf(e),getQueryTerm:s=>s.slice(s.indexOf(e)+1),custom:(...s)=>D(this,void 0,void 0,function*(){let[a]=s,u=!a[a.length-1].includes(e),c=u?t:n,r=J(u,i);return B(c,u&&o?e:"",r,s)})}}x.keyValue=fe;function pe({separator:e="=",delimiter:t=",",keys:n=[],values:i=[],cache:o=!1,insertSeparator:s=!0,insertDelimiter:a=!1,allowRepeatedKeys:l=!1,allowRepeatedValues:u=!0}){return{trigger:(c,r)=>{let d=F(c,e,t),g=F(r,e,t);return d!==g},getQueryTerm:c=>{let r=F(c,e,t);return c.slice(r+1)},custom:(...c)=>D(this,void 0,void 0,function*(){let[r]=c,d=r[r.length-1],g=F(d,e,t),O=g===-1||d.slice(g,g+e.length)!==e,p=O?n:i,h=J(O,o),f=yield B(p,O?s?e:"":a?t:"",h,c);if(O){if(l)return f;let w=d.split(t).map(m=>m.slice(0,m.indexOf(e)));return N(w,f)}if(u)return f;let S=d.split(t).map(w=>w.slice(w.indexOf(e)+e.length));return N(S,f)})}}x.keyValueList=pe});var z=M(A=>{"use strict";var me=A&&A.__awaiter||function(e,t,n,i){function o(s){return s instanceof n?s:new n(function(a){a(s)})}return new(n||(n=Promise))(function(s,a){function l(r){try{c(i.next(r))}catch(d){a(d)}}function u(r){try{c(i.throw(r))}catch(d){a(d)}}function c(r){r.done?s(r.value):o(r.value).then(l,u)}c((i=i.apply(e,t||[])).next())})};Object.defineProperty(A,"__esModule",{value:!0});A.ai=void 0;var he=4097,ge=4,ve=.8,ye=he*ge*ve;function Se({name:e,prompt:t,message:n,postProcess:i,temperature:o,splitOn:s}){return{scriptTimeout:15e3,custom:(a,l,u)=>me(this,void 0,void 0,function*(){var c,r;let d=yield l({command:"fig",args:["settings","--format","json","autocomplete.ai.enabled"]});if(!JSON.parse(d.stdout))return[];let g=typeof t=="function"?yield t({tokens:a,executeCommand:l,generatorContext:u}):t,O=typeof n=="function"?yield n({tokens:a,executeCommand:l,generatorContext:u}):n;if(O===null||O.length===0)return console.warn("No message provided to AI generator"),[];let p=ye-((c=g?.length)!==null&&c!==void 0?c:0),h={model:"gpt-3.5-turbo",source:"autocomplete",name:e,messages:[...g?[{role:"system",content:g}]:[],{role:"user",content:O.slice(0,p)}],temperature:o},b=JSON.stringify(h),f=yield l({command:"fig",args:["_","request","--route","/ai/chat","--method","POST","--body",b]}),S=JSON.parse(f.stdout);return(r=S?.choices.map(m=>{var _;return(_=m?.message)===null||_===void 0?void 0:_.content}).filter(m=>typeof m=="string").flatMap(m=>s?m.split(s).filter(_=>_.trim().length>0):[m]).map(m=>{if(i)return i(m);let _=m.trim().replace(/\n/g," ");return{icon:"\u{1FA84}",name:_,insertValue:`'${_}'`,description:"Generated by Fig AI"}}))!==null&&r!==void 0?r:[]})}}A.ai=Se});var X=M(y=>{"use strict";var be=y&&y.__createBinding||(Object.create?function(e,t,n,i){i===void 0&&(i=n);var o=Object.getOwnPropertyDescriptor(t,n);(!o||("get"in o?!t.__esModule:o.writable||o.configurable))&&(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,i,o)}:function(e,t,n,i){i===void 0&&(i=n),e[i]=t[n]}),we=y&&y.__exportStar||function(e,t){for(var n in e)n!=="default"&&!Object.prototype.hasOwnProperty.call(t,n)&&be(t,e,n)};Object.defineProperty(y,"__esModule",{value:!0});y.ai=y.folders=y.filepaths=void 0;var Q=K();Object.defineProperty(y,"filepaths",{enumerable:!0,get:function(){return Q.filepaths}});Object.defineProperty(y,"folders",{enumerable:!0,get:function(){return Q.folders}});we($(),y);var Oe=z();Object.defineProperty(y,"ai",{enumerable:!0,get:function(){return Oe.ai}})});var I=oe(X(),1),_e={name:"mongoimport",description:"Import data from a JSON, CSV, or TSV file into a MongoDB instance",options:[{name:"--help",description:"Returns information on the options and use of mongoimport"},{name:["--verbose","-v"],description:"Increases the amount of internal reporting returned on standard output or in log files"},{name:"--quiet",description:"Runs mongoimport in a quiet mode that attempts to limit the amount of output"},{name:"--version",description:"Returns the mongoimport release number"},{name:"--config",description:"Specifies the full path to a YAML configuration file containing sensitive values for the following options to mongoimport",args:{name:"filename",generators:(0,I.filepaths)({extensions:["yaml","yml"]})}},{name:"--uri",description:"Specifies the resolvable URI connection string of the MongoDB deployment",priority:100,args:{name:"connectionString",description:"MongoDB connection string",suggestions:[{name:"mongodb://localhost:27017",description:"Default Connection String"},{name:"mongodb+srv://username:password@cluster0.example.mongodb.net/database",description:"Atlas Connection String Example",priority:35}]}},{name:["--host","-h"],description:"Specifies the resolvable hostname of the MongoDB deployment",args:{name:"hostname:port",suggestions:[{name:"localhost:27017",description:"Default host"}]}},{name:"--port",description:"Specifies the TCP port on which the MongoDB instance listens for client connections",args:{name:"port",suggestions:[{name:"27017",description:"Default port"}]}},{name:"--ssl",description:"Enables connection to a mongod or mongos that has TLS/SSL support enabled"},{name:"--sslCAFile",description:"Specifies the .pem file that contains the root certificate chain from the Certificate Authority",args:{name:"filename",generators:(0,I.filepaths)({extensions:["pem"]})}},{name:"--sslPEMKeyFile",description:"Specifies the .pem file that contains both the TLS/SSL certificate and key",args:{name:"filename",generators:(0,I.filepaths)({extensions:["pem"]})}},{name:"--sslPEMKeyPassword",description:"Specifies the password to de-crypt the certificate-key file (i.e. --sslPEMKeyFile)",args:{name:"value",description:"Password",isDangerous:!0}},{name:"--sslCRLFile",description:"Specifies the .pem file that contains the Certificate Revocation List",args:{name:"filename",generators:(0,I.filepaths)({extensions:["pem"]})}},{name:"--sslAllowInvalidCertificates",description:"Bypasses the validation checks for server certificates and allows the use of invalid certificates"},{name:"--sslAllowInvalidHostnames",description:"Disables the validation of the hostnames in TLS/SSL certificates"},{name:["--username","-u"],description:"Specifies a username with which to authenticate to a MongoDB database that uses authentication",args:{name:"username"}},{name:["--password","-p"],description:"Specifies a password with which to authenticate to a MongoDB database that uses authentication",dependsOn:["--username"],args:{name:"password",isDangerous:!0}},{name:"--awsSessionToken",description:"Specifies the session token for MONGODB-AWS authentication mechanism",args:{name:"AWS Session Token"}},{name:"--authenticationDatabase",description:"Specifies the authentication database where the specified --username has been created",args:{name:"dbname",description:"Database name"}},{name:"--authenticationMechanism",description:"Specifies the authentication mechanism the mongoimport instance uses to authenticate to the mongod or mongos",args:{name:"name",suggestions:[{name:"SCRAM-SHA-1",description:"Default"},{name:"SCRAM-SHA-256"},{name:"MONGODB-X509"},{name:"MONGODB-AWS"},{name:"GSSAPI"},{name:"PLAIN"}]}},{name:"--gssapiServiceName",description:"Specify the name of the service using GSSAPI/Kerberos. This option is available only in MongoDB Enterprise",args:{name:"serviceName"}},{name:"--gssapiHostName",description:"Specify the hostname of the service using GSSAPI/Kerberos. This option is available only in MongoDB Enterprise",args:{name:"hostname"}},{name:["--db","-d"],description:"Specifies the name of the database on which to run the mongoimport",args:{name:"database"}},{name:["--collection","-c"],description:"Specifies the name of the collection to import",priority:90,args:{name:"collection"}},{name:["--fields","-f"],description:"Specify a comma separated list of field names when importing CSV or TSV files that do not have field names in the first (i.e. header) line of the file",exclusiveOn:["--fieldFile"],args:{name:"field1,field2,...",description:"Comma separated list of fields"}},{name:"--fieldFile",description:"Specify a file containing a comma separated list of field names when importing CSV or TSV files that do not have field names in the first (i.e. header) line of the file",exclusiveOn:["--fields","-f"],args:{name:"filename",generators:(0,I.filepaths)({extensions:["csv","tsv"]})}},{name:"--ignoreBlanks",description:"Ignores empty fields in CSV and TSV exports"},{name:"--type",description:"Specifies the file type to import",args:{name:"type",suggestions:[{name:"json",description:"JSON"},{name:"csv",description:"Comma-separated values"},{name:"tsv",description:"Tab-separated values"}]}},{name:"--file",description:"Specifies the location and name of a file containing the data to import",priority:80,args:{name:"filename",generators:(0,I.filepaths)({extensions:["json","csv","tsv"]})}},{name:"--drop",description:"Modifies the import process so that the target instance drops the collection before importing the data from the input"},{name:"--headerline",description:"Treats the first line of the input file as a header line"},{name:"--useArrayIndexFields",description:"Interpret natural numbers in fields as array indexes when importing CSV or TSV files"},{name:"--mode",description:"Specifies how the import process should handle existing documents in the database that match documents in the import file",priority:80,args:{name:"mode",suggestions:[{name:"insert",description:"Insert the documents in the import file"},{name:"upsert",description:"Replace existing documents in the database with matching documents from the import file"},{name:"merge",description:"Merge existing documents that match a document in the import file with the new document"},{name:"delete",description:"Delete existing documents in the database that match a document in the import file"}]}},{name:"--upsertFields",description:"Specifies a list of fields for the query portion of the import process",args:{name:"field1,field2,...",description:"Comma separated list of fields"}},{name:"--stopOnError",description:"Forces mongoimport to halt the insert operation at the first error rather than continuing the operation despite errors"},{name:"jsonArray",description:"Accepts the import of data expressed with multiple MongoDB documents within a single JSON array"},{name:"--legacy",description:"Indicates that the import data is in Extended JSON v1 format"},{name:"--maintainInsertionOrder",description:"Maintains the order of documents in the import file when inserting documents into the database"},{name:"--numInsertionWorkers",description:"Specifies the number of insertion workers to run concurrently",args:{name:"number",description:"Number of workers",default:"1"}},{name:"--writeConcern",description:"Specifies the write concern for each write operation that mongoimport performs",args:{name:"document",default:"{w:'majority'}"}},{name:"--bypassDocumentValidation",description:"Enables mongoimport to bypass document validation during the operation"},{name:"--columnsHaveTypes",description:"Instructs mongoimport that the field list specified in --fields, --fieldFile, or --headerline specifies the types of each field"},{name:"--parseGrace",description:"Specifies how mongoimport handles type coercion failures when importing CSV or TSV files with --columnsHaveTypes",args:{name:"grace",default:"stop",suggestions:[{name:"autoCast"},{name:"skipField"},{name:"skipRow"},{name:"stop"}]}}]},Ce=_e;export{Ce as default};
