var i={custom:async(c,o,r)=>{let{stdout:n}=await o({command:"cat",args:[`${r.environmentVariables.HOME}/.projj/cache.json`]}),t=JSON.parse(n);return Object.keys(t).map(e=>({name:e.split("/").pop(),description:t[e].repo}))}},s={custom:async(c,o,r)=>{let{stdout:n}=await o({command:"cat",args:[`${r.environmentVariables.HOME}/.projj/config.json`]}),e=JSON.parse(n).hooks;return Object.keys(e).map(a=>({name:a,description:e[a]}))}},p={name:"projj",description:"Manage repository easily",subcommands:[{name:"completion",description:"Generate completion script"},{name:"add",description:"Add repository",args:{name:"repository url"}},{name:"find",description:"Find repository",args:{name:"repository name",generators:i}},{name:"import",description:"Import repositories from existing directory",args:{name:"directory",template:"folders"}},{name:"init",description:"Initialize configuration"},{name:"remove",description:"Remove repository",args:{name:"repository name",generators:i}},{name:"run",description:"Run hook in current directory",args:{name:"hook name",generators:s}},{name:"runall",description:"Run hook in every repository",args:{name:"hook name",generators:s}},{name:"sync",description:"Sync data from directory",args:{name:"directory",template:"folders"}}],options:[{name:["--help","-h"],description:"Show help for projj"},{name:["--version","-v"],description:"Show version number"}]},m=p;export{m as default};
