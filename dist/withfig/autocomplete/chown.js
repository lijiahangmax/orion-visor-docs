var t={custom:async function(n,r){let i=n.find(e=>e.includes(":")),o=n.find(e=>/^-.*n.*/.test(e)),s;if(i){let{stdout:e}=await r({command:"bash",args:["-c","dscl . -list /Groups PrimaryGroupID | tr -s ' '| sort -r"]});s=e}else{let{stdout:e}=await r({command:"bash",args:["-c","dscl . -list /Users UniqueID | tr -s ' '| sort -r"]});s=e}return s.split(`
`).map(e=>e.split(" ")).map(e=>({name:o?e[1]:e[0],description:i?`Group - ${o?e[0]:`gid: ${e[1]}`}`:`User - ${o?e[0]:`uid: ${e[1]}`}`,icon:i?"\u{1F465}":"\u{1F464}",priority:90}))},trigger:":",getQueryTerm:":"},a={name:"chown",description:"Change the user and/or group ownership of a given file, directory, or symbolic link",args:[{name:"owner[:group] or :group",generators:t},{name:"file/directory",isVariadic:!0,template:["filepaths","folders"]}],options:[{name:"-f",description:"Don't report any failure to change file owner or group, nor modify the exit status to reflect such failures"},{name:"-h",description:"If the file is a symbolic link, change the user ID and/or the group ID of the link itself"},{name:"-n",description:"Interpret user ID and group ID as numeric, avoiding name lookups"},{name:"-v",description:"Cause chown to be verbose, showing files as the owner is modified"},{name:"-R",description:"Change the user ID and/or the group ID for the file hierarchies rooted in the files instead of just the files themselves"},{name:"-H",description:"If the -R option is specified, symbolic links on the command line are followed",exclusiveOn:["-L","-P"],dependsOn:["-R"]},{name:"-L",description:"If the -R option is specified, all symbolic links are followed",exclusiveOn:["-H","-P"],dependsOn:["-R"]},{name:"-P",description:"If the -R option is specified, no symbolic links are followed",exclusiveOn:["-H","-L"],dependsOn:["-R"]}]},c=a;export{c as default,t as existingUsersandGroups};
