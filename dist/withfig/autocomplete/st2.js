var q={custom:async function(V,K){let F=V.find(c=>c.includes(":")),S=V.find(c=>/^-.*n.*/.test(c)),M;if(F){let{stdout:c}=await K({command:"bash",args:["-c","dscl . -list /Groups PrimaryGroupID | tr -s ' '| sort -r"]});M=c}else{let{stdout:c}=await K({command:"bash",args:["-c","dscl . -list /Users UniqueID | tr -s ' '| sort -r"]});M=c}return M.split(`
`).map(c=>c.split(" ")).map(c=>({name:S?c[1]:c[0],description:F?`Group - ${S?c[0]:`gid: ${c[1]}`}`:`User - ${S?c[0]:`uid: ${c[1]}`}`,icon:F?"\u{1F465}":"\u{1F464}",priority:90}))},trigger:":",getQueryTerm:":"};var e={name:["-h","--help"],description:"Show this help and exit"},n={name:["-t","--token"],description:"Access token for user authentication. Get ST2_AUTH_TOKEN from the environment variables by default",args:{name:"TOKEN"}},s={name:"--api-key",description:"Api Key for user authentication. Get ST2_API_KEY from the environment variables by default",args:{name:"API_KEY"}},t={name:["-j","--json"],description:"Print output in JSON format"},i={name:["-y","--yaml"],description:"Print output in YAML format"},r={name:"--attr",description:"List of attributes to include in the output. 'all' or unspecified will return all attributes",args:{name:"ATTR",isVariadic:!0}},u={name:["-d","--detail"],description:"Display full detail of the execution in table format"},g={name:["-k","--key"],description:"If result is type of JSON, then print specific key-value pair; dot notation for nested JSON is supported",args:{name:"KEY"}},h={name:"--delay",description:"How long (in milliseconds) to delay the execution before scheduling",args:{name:"DELAY"}},f={name:"--tail",description:"Automatically start tailing new execution"},A={name:"--auto-dict",description:"Automatically convert list items to dictionaries when colons are detected. (NOTE - this parameter and its functionality will be deprecated in the next release in favor of a more robust conversion method)"},R={name:["--trace-tag","--trace_tag"],description:"A trace tag string to track execution later",args:{name:"TRACE_TAG"}},J={name:"--trace-id",description:"Existing trace id for this execution",args:{name:"TRACE_ID"}},G={name:["-a","--async"],description:"Do not wait for action to finish"},E={name:["-e","--inherit-env"],description:"Pass all the environment variables which are accessible to the CLI as 'env' parameter to the action. Note: Only works with python, local and remote runners"},m={name:["-u","--user"],description:"User under which to run the action (admins only)",args:{name:"USER",generators:q}},o={name:["-w","--width"],description:"Set the width of the columns in output",args:{name:"WIDTH",isVariadic:!0}},l={name:["-p","--pack"],description:"Only return resources belonging to the provided pack",args:{name:"PACK"}},z={name:["-r","--resource-ref"],description:"Return policies for the resource ref",args:{name:"RESOURCE_REF"}},ee={name:["-pt","--policy-type"],description:"Return policies of the policy type",args:{name:"POLICY_TYPE"}},j={name:"-p",description:"Password",args:{name:"PASSWORD"}},L={name:["-l","--ttl"],description:"The life span of the token in seconds. Max TTL configured by the admin supersedes this",args:{name:"TTL"}},te={name:["-t","--only-token"],description:"On successful authentication, print only token to the console"},ie={name:["-w","--write-password"],description:"Write the password in plain text to the config file (default is to omit it)"},y={name:["-n","--last"],description:"List N most recent; use -n -1 to fetch the full result set",args:{name:"LAST",suggestions:["10","5","1","-1"]}},W={name:["-s","--sort"],description:"Sort action executions by start timestamp, asc|ascending (earliest first) or desc|descending (latest first)",args:{name:"SORT_ORDER",suggestions:["desc","descending","asc","ascending"]}},U={name:["-tg","timestamp-gt"],description:"Only return executions with timestamp greater than the one provided. Use time in the format '2000-01-01T12:00:00.000Z'",args:{name:"TIMESTAMP_GT"}},_={name:["-tl","timestamp-lt"],description:"Only return executions with timestamp lower than the one provided. Use time in the format '2000-01-01T12:00:00.000Z'",args:{name:"TIMESTAMP_LT"}},ne={name:["-l","--showall"],description:"Show all attributes"},C={name:"--action",description:"Action reference to filter the list",args:{name:"ACTION"}},se={name:"--file",description:"Local file path to the workflow definition",args:{name:"FILE",template:"filepaths"}},$={name:"--status",description:"Only return executions with the provided status. Possible values are 'succeeded', 'running', 'scheduled', 'paused', 'failed', 'canceling' or 'canceled'",args:{name:"STATUS",suggestions:["succeeded","running","scheduled","paused","failed","canceling","canceled"]}},P={name:"--trigger_instance",description:"Trigger instance id to filter the list",args:{name:"TRIGGER_INSTANCE"}},re={name:"--show-secrets",description:"Full list of attributes"},oe={name:["-m","--metadata"],description:"Optional metadata to associate with the API Keys",args:{name:"METADATA"}},ae={name:["-k","--only-key"],description:"Only print API Key to the console on creation"},ce={name:["-x","--exclude-result"],description:"Don't retrieve and display the result field"},pe={name:"--tasks",description:"Name of the workflow tasks to re-run",args:{name:"TASKS",isVariadic:!0}},de={name:"--no-reset",description:"Name of the with-items tasks to not reset. This only applies to Orquesta workflows. By default, all iterations for with- items tasks is rerun. If no reset, only failed iterations are rerun",args:{name:"NO_RESET"}},me={name:"--type",description:"Type of output to tail for. If not provided, defaults to all",args:{name:"OUTPUT_TYPE"}},ue={name:"--types",description:"Types of content to register",args:{name:"TYPES",isVariadic:!0}},ge={name:"--include-metadata",description:"Include metadata (timestamp, output type) with the output"},le={name:["-r","--response"],description:"Entire response payload as JSON string (bypass interactive mode)",args:{name:"RESPONSE"}},Y={name:"--prefix",description:"Only return values with names starting with the provided prefix",args:{name:"PREFIX"}},H={name:["-d","--decrypt"],description:"Decrypt secrets and displays plain text"},he={name:["-e","--enrypt"],description:"Encrypt values before saving"},fe={name:"--enrypted",description:"Value provided is already encrypted with the instance crypto key and should be stored as-is"},Ae={name:["-c","--convert"],description:"Convert non-string types (hash, array, boolean, int, float) to a JSON string before loading it into the datastore"},b={name:["-s","--scope"],description:"Scope item is under. Example: 'user'"},ve={name:"force",description:"Force"},ye={name:"--skip-dependencies",description:"Skip dependencies"},Oe={name:["-r","--resource-type"],description:"Return policy types for the resource type",args:{name:"RESOURCE_TYPE"}},be={name:"--iftt",description:"Show trigger and action in display list"},De={name:"--enabled",description:"Show enabled"},Pe={name:"--disabled",description:"Show disabled"},Q={name:["-g","--trigger"],description:"Trigger type reference to filter the list",args:{name:"TRIGGER"}},Fe={name:["-ty","--timer-type"],description:"List timers type, example: 'core.st2.IntervalTimer', 'core.st2.DateTimer', 'core.st2.CronTimer'",args:{name:"TIMER_TYPE",suggestions:["core.st2.IntervalTimer","core.st2.DateTimer","core.st2.CronTimer"]}},k={name:["-e","--execution"],description:"Execution to filter the list",args:{name:"EXECUTION"}},x={name:["-r","--rule"],description:"Rule to filter the list",args:{name:"RULE"}},Se={name:"--show-executions",description:"Only show executions"},Me={name:"--show-rules",description:"Only show rules"};var we={name:["-n","--hide-noop-triggers"],description:"Hide noop trigger instances"},ke={name:"--group-id",description:"Group ID",args:{name:"GROUP_ID"}},xe={name:["-s","--system"],description:"Only display system roles"},Te={name:["-r","--role"],description:"Role to filter on",args:{name:"ROLE"}},Ie={name:["-s","--source"],description:"Source to filter on",args:{name:"SOURCE"}},Re={name:"--remote",description:"Only display remote role assignments"},a={name:"ref-or-id",description:"Reference or ID"},O={name:"ref-or-id",description:"Reference or ID",isVariadic:!0},v={name:"name-or-id",description:"Name or ID"},X={name:"name-or-id",description:"Name or ID",isVariadic:!0},D={name:"key-or-id",description:"Key or ID"},T={name:"id",description:"ID"},d={name:"id",description:"ID",isVariadic:!0},N={name:"parameters",description:"List of keyword args, positional args, and optional args for the action",isVariadic:!0},p={name:"file",description:"JSON/YAML file",template:"filepaths"},B={name:"comamnd",description:"Command text"},Z={name:"username",description:"Name of the user"},I={name:"name",description:"Name"},Ge={name:"name",description:"Name",isVariadic:!0};var Ee={name:"value",description:"Value",isOptional:!0},Le={name:"prefix",description:"Prefix"},Ue={name:"ref",description:"Reference"},_e={name:"ref",description:"Reference",isVariadic:!0},Ce={name:"pack",description:"Pack"},w={name:"pack",description:"Pack",isVariadic:!0},Ne={name:"query",description:"Query"};var Ve={name:"url",description:"URL",isVariadic:!0},Ke={name:"run",description:"Invoke an action manually",parserDirectives:{optionsMustPrecedeArguments:!0},options:[n,s,t,i,e,r,u,g,h,f,A,R,J,G,E,m],args:[a,N]},qe={name:"action",description:"An activity that happens as a response to the external event",subcommands:[{name:"list",description:"Get the list of actions",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r,o,l]},{name:"get",description:"Get individual action",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r],args:O},{name:"create",description:"Create a new action",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:p},{name:"update",description:"Update an existing action",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:[a,p]},{name:"delete",description:"Delete an existing action",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,{name:["-r","--remove-files"],description:"Remove action files from disk"}],args:a},{name:"enable",description:"Enable an existing action",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:a},{name:"disable",description:"Disable an existing action",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:a},{name:"execute",description:"Invoke an action manually",parserDirectives:{optionsMustPrecedeArguments:!0},options:[n,s,t,i,r,g,h,f,A,R,J,G,E,m],args:[a,N]}]},Ye={name:"action-alias",description:"Action aliases",subcommands:[{name:"list",description:"Get the list of action aliases",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r,o,l]},{name:"get",description:"Get the individual action aliases",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r],args:O},{name:"create",description:"Create a new action alias",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:p},{name:"update",description:"Update an existing action alias",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:[v,p]},{name:"delete",description:"Delete an existing action alias",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:v},{name:"match",description:"Get the action alias that match the command text",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r,o],args:B},{name:"execute",description:"Execute the command text by finding a matching action alias",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,m],args:B}]},He={name:"auth",description:"Authenticate user and acquire access token",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,t,i,j,L,te],args:Z},Be={name:"login",description:"Authenticate user, acquire access token, and update CLI config directory",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,t,i,j,L,ie],args:Z},Je={name:"whoami",description:"Display the currently authenticated user",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,t,i]},je={name:"apikey",description:"API Keys",parserDirectives:{optionsMustPrecedeArguments:!0},subcommands:[{name:"list",description:"Get the list of api keys",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r,o,m,u,re]},{name:"get",description:"Get individual api key",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r],args:D},{name:"create",description:"Create a new api key",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,m,oe,ae]},{name:"delete",description:"Delete an existing api key",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:D},{name:"enable",description:"Enable an existing api key",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:D},{name:"disable",description:"Disable an existing api key",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,g,t,i],args:D},{name:"load",description:"Load api key from a file",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:p}]},We={name:"execution",description:"An invocation of an action",parserDirectives:{optionsMustPrecedeArguments:!0},subcommands:[{name:"list",description:"Get the list of the 50 most recent action executions",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,y,W,U,_,ne,r,o,C,$,m,P]},{name:"get",description:"Get individual action execution",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,ce,r,u,g,h,f,A],args:d},{name:"re-run",description:"Re-run a particular action",parserDirectives:{optionsMustPrecedeArguments:!0},options:[n,s,t,i,pe,de,G,E,e,r,u,g,h,f,A],args:[T,N]},{name:"cancel",description:"Cancel action executions",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:d},{name:"pause",description:"Pause action executions (workflow executions only)",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r,u,g,h,f,A],args:d},{name:"resume",description:"Resume action executions (workflow executions only)",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r,u,g,h,f,A],args:d},{name:"tail",description:"Tail output of a particular execution",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,me,ge],args:T}]},$e={name:"inquiry",description:"Inquiries provide an opportunity to ask a question and wait for a response in a workflow",subcommands:[{name:"list",description:"Get the list of the 50 most recent inquiries",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,y,r,o]},{name:"get",description:"Get individual inquiry",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r],args:d},{name:"respond",description:"Respond to an inquiry",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,le],args:T}]},Qe={name:"key",description:"Key value pair is used to store commonly used configuration for reuse in sensors, actions, and rules",subcommands:[{name:"list",description:"Get the list of the 50 most recent key value pairs",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r,o,Y,H,b,m,y]},{name:"get",description:"Get individual key value pair",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r,H,b],args:Ge},{name:"delete",description:"Delete an existing key value pair",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,b,m],args:I},{name:"set",description:"Set an existing key value pair",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,he,fe,L,b,m],args:[I,Ee]},{name:"load",description:"Load a list of key value pairs from file",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,Ae],args:p},{name:"delete_by_prefix",description:"Delete KeyValue pairs which match the provided prefix",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,Y],args:Le}]},Xe={name:"pack",description:"A group of related integration resources: actions, rules, and sensors",subcommands:[{name:"list",description:"Get the list of packs",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r,o]},{name:"get",description:"Get information about an installed pack",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r],args:_e},{name:"show",description:"Get information about an available pack from the index",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:Ce},{name:"search",description:"Search the index for a pack with any attribute matching the query",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r,o],args:Ne},{name:"install",description:"Install new packs",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,o,r,u,ve,ye],args:w},{name:"remove",description:"Remove packs",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,o,r,u],args:w},{name:"register",description:"Register pack(s): sync all file changes with DB",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,ue],args:w},{name:"config",description:"Configure a pack based on config schema",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:I}]},Ze={name:"policy",description:"Policy that is enforced on a resource",subcommands:[{name:"list",description:"Get the list of policies",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r,o,l,z,ee]},{name:"get",description:"Get individual policy",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r],args:O},{name:"create",description:"Create a new policy",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:p},{name:"update",description:"Updating an existing policy",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:[a,p]},{name:"delete",description:"Delete an existing policy",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:a}]},ze={name:"policy-type",description:"Type of policy that can be applied to the resources",subcommands:[{name:"list",description:"Get the list of policy types",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r,o,Oe]},{name:"get",description:"Get individual policy type",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r],args:a}]},et={name:"rule",description:"A specification to invoke an 'action' on a 'trigger' selectively based on some criteria'",subcommands:[{name:"list",description:"Get the list of the 50 most recent rules",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r,o,y,be,l,De,Pe,C,Q]},{name:"get",description:"Get individual rule",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r],args:a},{name:"create",description:"Create a new rule",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:p},{name:"update",description:"Update an existing rule",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:[a,p]},{name:"delete",description:"Delete an existing rule",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:a},{name:"enable",description:"Enable an existing rule",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:a},{name:"disable",description:"Disable an existing rule",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,s],args:a}]},tt={name:"webhook",description:"Webhooks",subcommands:[{name:"list",description:"Get the list of webhooks",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r,o,l]},{name:"get",description:"Get individual webhooks",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r],args:Ve}]},it={name:"timer",description:"Timers",subcommands:[{name:"list",description:"Get the list of timers",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r,o,Fe]},{name:"get",description:"Get individual timer",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r],args:X}]},nt={name:"runner",description:"Runner is a type of handler for a specific class of actions",subcommands:[{name:"list",description:"List of commands for managing runners",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r,o]},{name:"get",description:"Get individual runner",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r],args:X},{name:"enable",description:"Enable an existing runner",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:v},{name:"disable",description:"Disable an existing runner",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:v}]},st={name:"sensor",description:"An adapter which allows you to integrate StackStorm with external system",subcommands:[{name:"list",description:"Get the list of sensortypes",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r,o,l]},{name:"get",description:"Get individual sensor",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r],args:O},{name:"enable",description:"Enable an existing sensor",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:a},{name:"disable",description:"Disalbe an existing sensor",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:a}]},rt={name:"trace",description:"A group of executions, rules and triggerinstances that are related",subcommands:[{name:"list",description:"Get the list of the 50 most recent traces",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,y,W,R,k,x,P,r,o]},{name:"get",description:"Get individual trace",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,k,x,P,Se,Me,we],args:d}]},ot={name:"trigger",description:"An external event that is mapped to a st2 input. It is the st2 invocation point",subcommands:[{name:"list",description:"Get the list of triggers",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r,o,l]},{name:"get",description:"Get individual trigger",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r],args:O},{name:"create",description:"Create a new trigger",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:p},{name:"update",description:"Updating an existing trigger",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:[a,p]},{name:"delete",description:"Delete an existing trigger",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:a},{name:"getspecs",description:"Return Trigger Specifications of a Trigger",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:Ue}]},at={name:"trigger-instance",description:"Actual instances of triggers received by st2",subcommands:[{name:"list",description:"Get the list of the 50 most recent triggerinstances",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,y,U,_,r,o,Q,$]},{name:"get",description:"Get individual trigger instance",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r],args:d},{name:"re-emit",description:"Re-emit a particular trigger instance",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r],args:d}]},ct={name:"rule-enforcement",description:"Models that represent enforcement of rules",subcommands:[{name:"list",description:"Get the list of the 50 most recent rule enforcements",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,U,_,r,o,P,k,x]},{name:"get",description:"Get individual rule enforcement",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r],args:d},{name:"create",description:"Create a new rule enforcement",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:p},{name:"update",description:"Update an existing rule enforcement",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:[v,p]},{name:"delete",description:"Delete an existing rule enforcement",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i],args:v}]},pt={name:"workflow",description:"An adapter which allows you to integrate StackStorm with external system",subcommands:[{name:"inspect",description:"Inspect workflow definition and return the list of errors if any",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,se,C]}]},dt={name:"service-registry",description:"Service registry group and membership related commands",subcommands:[{name:"group",description:"Manage service registry groups",subcommands:[{name:"list",description:"Get list of groups",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r,o]}]},{name:"member",description:"Manage service registry members",subcommands:[{name:"list",description:"Get list of group members",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r,o,ke]}]}]},mt={name:"role",description:"RBAC roles",subcommands:[{name:"list",description:"Get the list of the roles",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,xe,r,o]},{name:"get",description:"Get individual role",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,r],args:d}]},ut={name:"role-assignment",description:"RBAC role assignments",subcommands:[{name:"list",description:"Get the list of role assignments",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i]},{name:"get",description:"Get individual assignment",parserDirectives:{optionsMustPrecedeArguments:!0},options:[e,n,s,t,i,Te,m,Ie,Re,r,o]}]},gt={name:"st2",description:"CLI for StackStorm event-driven automation platform",subcommands:[Ke,qe,Ye,He,Be,Je,je,We,$e,Qe,Xe,Ze,ze,et,tt,it,nt,st,rt,ot,at,ct,pt,dt,mt,ut],options:[{name:["--help","-h"],description:"Show this help message and exit",priority:60},{name:"--version",description:"Show program's version number and exit"},{name:"--url",description:"Base URL for the API servers. Assumes all servers use the same base URL and default ports are used. Get ST2_BASE_URL from the environment variables by default",args:{name:"BASE_URL"}},{name:"--auth-url",description:"URL for the authentication service. Get ST2_AUTH_URL from the environment variables by default",args:{name:"AUTH_URL"}},{name:"--api-url",description:"URL for the API server. Get ST2_API_URL from the environment variables by default",args:{name:"API_URL"}},{name:"--stream-url",description:"URL for the stream endpoint. Get ST2_STREAM_URLfrom the environment variables by default",args:{name:"ST2_STREAM_URL"}},{name:"--api-version",description:"API version to use. Get ST2_API_VERSION from the environment variables by default",args:{name:"API_VERSION"}},{name:"--cacert",description:"Path to the CA cert bundle for the SSL endpoints. Get ST2_CACERT from the environment variables by default. If this is not provided, then SSL cert will not be verified",args:{name:"CACERT"}},{name:"--config-file",description:"Path to the CLI config file",args:{name:"CONFIG_FILE"}},{name:"--print-config",description:"Parse the config file and print the values"},{name:"--skip-config",description:"Don't parse and use the CLI config file"},{name:"--debug",description:"Enable debug mode"}]},ft=gt;export{ft as default};
